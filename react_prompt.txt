Using the skills we talked about today, 
start the process of creating another React 'app' from scratch,

Your project by the end of the homework should have: (At Minimum)
- 3 Components (Build out a landing page and maybe a styled out nav bar)
- Styled with basic CSS, React-Bootstrap, and/or Material-UI


HW Day 2:

Updating State Exercise
- Incorporate state into an aspect of your application.  You can do this anyway you'd like but we should be able to change the initial state set and see those changes rendered on the page.  There's an example of starter code below you could incorporate if you like that was used to store information about the current player in a web game app.
Starter code example:
const Component = () => {
    const [game, setGame] = useState({
        id: 1,
        player: {
            name: "Dylan"
        }
     })

    const handleClick = () => {
        // your code here
    }

    return (
        // your JSX here
    )

    HW Day 3:

CORS


Within Component, use useEffect to initiate a fetch on component mount.

    Use fetch or axios.get to retrieve data from your Flask API endpoint (e.g., http://localhost:5000/api/data).

    Store the response data in state using useState.
    Display the data in your component.

    Implement error handling within the request to log any errors.

    Run your React app and ensure the component renders the data fetched from the Flask API.

    Submit your React component code via the provided submission link or repository by the deadline.

    https://react-flask-wk6d1hw.onrender.com